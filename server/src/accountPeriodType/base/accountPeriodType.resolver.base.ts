/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAccountPeriodTypeArgs } from "./CreateAccountPeriodTypeArgs";
import { UpdateAccountPeriodTypeArgs } from "./UpdateAccountPeriodTypeArgs";
import { DeleteAccountPeriodTypeArgs } from "./DeleteAccountPeriodTypeArgs";
import { AccountPeriodTypeFindManyArgs } from "./AccountPeriodTypeFindManyArgs";
import { AccountPeriodTypeFindUniqueArgs } from "./AccountPeriodTypeFindUniqueArgs";
import { AccountPeriodType } from "./AccountPeriodType";
import { AccountingPeriodFindManyArgs } from "../../accountingPeriod/base/AccountingPeriodFindManyArgs";
import { AccountingPeriod } from "../../accountingPeriod/base/AccountingPeriod";
import { AccountPeriodTypeService } from "../accountPeriodType.service";

@graphql.Resolver(() => AccountPeriodType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AccountPeriodTypeResolverBase {
  constructor(
    protected readonly service: AccountPeriodTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "read",
    possession: "any",
  })
  async _accountPeriodTypesMeta(
    @graphql.Args() args: AccountPeriodTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountPeriodType])
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "read",
    possession: "any",
  })
  async accountPeriodTypes(
    @graphql.Args() args: AccountPeriodTypeFindManyArgs
  ): Promise<AccountPeriodType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountPeriodType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "read",
    possession: "own",
  })
  async accountPeriodType(
    @graphql.Args() args: AccountPeriodTypeFindUniqueArgs
  ): Promise<AccountPeriodType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountPeriodType)
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "create",
    possession: "any",
  })
  async createAccountPeriodType(
    @graphql.Args() args: CreateAccountPeriodTypeArgs
  ): Promise<AccountPeriodType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountPeriodType)
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "update",
    possession: "any",
  })
  async updateAccountPeriodType(
    @graphql.Args() args: UpdateAccountPeriodTypeArgs
  ): Promise<AccountPeriodType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountPeriodType)
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "delete",
    possession: "any",
  })
  async deleteAccountPeriodType(
    @graphql.Args() args: DeleteAccountPeriodTypeArgs
  ): Promise<AccountPeriodType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountingPeriod])
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "read",
    possession: "any",
  })
  async accountingPeriods(
    @graphql.Parent() parent: AccountPeriodType,
    @graphql.Args() args: AccountingPeriodFindManyArgs
  ): Promise<AccountingPeriod[]> {
    const results = await this.service.findAccountingPeriods(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
