/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAccountingPeriodArgs } from "./CreateAccountingPeriodArgs";
import { UpdateAccountingPeriodArgs } from "./UpdateAccountingPeriodArgs";
import { DeleteAccountingPeriodArgs } from "./DeleteAccountingPeriodArgs";
import { AccountingPeriodFindManyArgs } from "./AccountingPeriodFindManyArgs";
import { AccountingPeriodFindUniqueArgs } from "./AccountingPeriodFindUniqueArgs";
import { AccountingPeriod } from "./AccountingPeriod";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { AccountPeriodType } from "../../accountPeriodType/base/AccountPeriodType";
import { AccountingPeriodService } from "../accountingPeriod.service";

@graphql.Resolver(() => AccountingPeriod)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AccountingPeriodResolverBase {
  constructor(
    protected readonly service: AccountingPeriodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "read",
    possession: "any",
  })
  async _accountingPeriodsMeta(
    @graphql.Args() args: AccountingPeriodFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountingPeriod])
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "read",
    possession: "any",
  })
  async accountingPeriods(
    @graphql.Args() args: AccountingPeriodFindManyArgs
  ): Promise<AccountingPeriod[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountingPeriod, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "read",
    possession: "own",
  })
  async accountingPeriod(
    @graphql.Args() args: AccountingPeriodFindUniqueArgs
  ): Promise<AccountingPeriod | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountingPeriod)
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "create",
    possession: "any",
  })
  async createAccountingPeriod(
    @graphql.Args() args: CreateAccountingPeriodArgs
  ): Promise<AccountingPeriod> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        typeId: args.data.typeId
          ? {
              connect: args.data.typeId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountingPeriod)
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "update",
    possession: "any",
  })
  async updateAccountingPeriod(
    @graphql.Args() args: UpdateAccountingPeriodArgs
  ): Promise<AccountingPeriod | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          typeId: args.data.typeId
            ? {
                connect: args.data.typeId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountingPeriod)
  @nestAccessControl.UseRoles({
    resource: "AccountingPeriod",
    action: "delete",
    possession: "any",
  })
  async deleteAccountingPeriod(
    @graphql.Args() args: DeleteAccountingPeriodArgs
  ): Promise<AccountingPeriod | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Transaction])
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async transactions(
    @graphql.Parent() parent: AccountingPeriod,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(
    @graphql.Parent() parent: AccountingPeriod,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AccountPeriodType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountPeriodType",
    action: "read",
    possession: "any",
  })
  async typeId(
    @graphql.Parent() parent: AccountingPeriod
  ): Promise<AccountPeriodType | null> {
    const result = await this.service.getTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
